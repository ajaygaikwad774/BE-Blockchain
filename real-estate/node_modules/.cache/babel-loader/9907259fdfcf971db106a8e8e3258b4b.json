{"ast":null,"code":"/*  jQuery Nice Select - v1.1.0\n    https://github.com/hernansartorio/jquery-nice-select\n    Made by Hern√°n Sartorio  */\n(function ($) {\n  $.fn.niceSelect = function (method) {\n    // Methods\n    if (typeof method == 'string') {\n      if (method == 'update') {\n        this.each(function () {\n          var $select = $(this);\n          var $dropdown = $(this).next('.nice-select');\n          var open = $dropdown.hasClass('open');\n\n          if ($dropdown.length) {\n            $dropdown.remove();\n            create_nice_select($select);\n\n            if (open) {\n              $select.next().trigger('click');\n            }\n          }\n        });\n      } else if (method == 'destroy') {\n        this.each(function () {\n          var $select = $(this);\n          var $dropdown = $(this).next('.nice-select');\n\n          if ($dropdown.length) {\n            $dropdown.remove();\n            $select.css('display', '');\n          }\n        });\n\n        if ($('.nice-select').length == 0) {\n          $(document).off('.nice_select');\n        }\n      } else {\n        console.log('Method \"' + method + '\" does not exist.');\n      }\n\n      return this;\n    } // Hide native select\n\n\n    this.hide(); // Create custom markup\n\n    this.each(function () {\n      var $select = $(this);\n\n      if (!$select.next().hasClass('nice-select')) {\n        create_nice_select($select);\n      }\n    });\n\n    function create_nice_select($select) {\n      $select.after($('<div></div>').addClass('nice-select').addClass($select.attr('class') || '').addClass($select.attr('disabled') ? 'disabled' : '').attr('tabindex', $select.attr('disabled') ? null : '0').html('<span class=\"current\"></span><ul class=\"list\"></ul>'));\n      var $dropdown = $select.next();\n      var $options = $select.find('option');\n      var $selected = $select.find('option:selected');\n      $dropdown.find('.current').html($selected.data('display') || $selected.text());\n      $options.each(function (i) {\n        var $option = $(this);\n        var display = $option.data('display');\n        $dropdown.find('ul').append($('<li></li>').attr('data-value', $option.val()).attr('data-display', display || null).addClass('option' + ($option.is(':selected') ? ' selected' : '') + ($option.is(':disabled') ? ' disabled' : '')).html($option.text()));\n      });\n    }\n    /* Event listeners */\n    // Unbind existing events in case that the plugin has been initialized before\n\n\n    $(document).off('.nice_select'); // Open/close\n\n    $(document).on('click.nice_select', '.nice-select', function (event) {\n      var $dropdown = $(this);\n      $('.nice-select').not($dropdown).removeClass('open');\n      $dropdown.toggleClass('open');\n\n      if ($dropdown.hasClass('open')) {\n        $dropdown.find('.option');\n        $dropdown.find('.focus').removeClass('focus');\n        $dropdown.find('.selected').addClass('focus');\n      } else {\n        $dropdown.focus();\n      }\n    }); // Close when clicking outside\n\n    $(document).on('click.nice_select', function (event) {\n      if ($(event.target).closest('.nice-select').length === 0) {\n        $('.nice-select').removeClass('open').find('.option');\n      }\n    }); // Option click\n\n    $(document).on('click.nice_select', '.nice-select .option:not(.disabled)', function (event) {\n      var $option = $(this);\n      var $dropdown = $option.closest('.nice-select');\n      $dropdown.find('.selected').removeClass('selected');\n      $option.addClass('selected');\n      var text = $option.data('display') || $option.text();\n      $dropdown.find('.current').text(text);\n      $dropdown.prev('select').val($option.data('value')).trigger('change');\n    }); // Keyboard events\n\n    $(document).on('keydown.nice_select', '.nice-select', function (event) {\n      var $dropdown = $(this);\n      var $focused_option = $($dropdown.find('.focus') || $dropdown.find('.list .option.selected')); // Space or Enter\n\n      if (event.keyCode == 32 || event.keyCode == 13) {\n        if ($dropdown.hasClass('open')) {\n          $focused_option.trigger('click');\n        } else {\n          $dropdown.trigger('click');\n        }\n\n        return false; // Down\n      } else if (event.keyCode == 40) {\n        if (!$dropdown.hasClass('open')) {\n          $dropdown.trigger('click');\n        } else {\n          var $next = $focused_option.nextAll('.option:not(.disabled)').first();\n\n          if ($next.length > 0) {\n            $dropdown.find('.focus').removeClass('focus');\n            $next.addClass('focus');\n          }\n        }\n\n        return false; // Up\n      } else if (event.keyCode == 38) {\n        if (!$dropdown.hasClass('open')) {\n          $dropdown.trigger('click');\n        } else {\n          var $prev = $focused_option.prevAll('.option:not(.disabled)').first();\n\n          if ($prev.length > 0) {\n            $dropdown.find('.focus').removeClass('focus');\n            $prev.addClass('focus');\n          }\n        }\n\n        return false; // Esc\n      } else if (event.keyCode == 27) {\n        if ($dropdown.hasClass('open')) {\n          $dropdown.trigger('click');\n        } // Tab\n\n      } else if (event.keyCode == 9) {\n        if ($dropdown.hasClass('open')) {\n          return false;\n        }\n      }\n    }); // Detect CSS pointer-events support, for IE <= 10. From Modernizr.\n\n    var style = document.createElement('a').style;\n    style.cssText = 'pointer-events:auto';\n\n    if (style.pointerEvents !== 'auto') {\n      $('html').addClass('no-csspointerevents');\n    }\n\n    return this;\n  };\n})(jQuery);","map":null,"metadata":{},"sourceType":"script"}